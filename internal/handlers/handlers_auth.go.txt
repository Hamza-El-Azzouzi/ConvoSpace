// package handlers

// import (
// 	"encoding/json"
// 	"net/http"
// 	"time"

// 	"forum/internal/middleware"
// 	"forum/internal/services"
// 	"forum/internal/utils"

// 	"github.com/gofrs/uuid/v5"
// )

// type AuthHandler struct {
// 	AuthService    *services.AuthService
// 	AuthMidlaware  *middleware.AuthMiddleware
// 	SessionService *services.SessionService
// }
// type LoginData struct {
// 	Email  string `json:"email"`
// 	Passwd string `json:"password"`
// 	// ErrMessage string
// }
// type SignUpData struct {
// 	Username      string `json:"username"`
// 	Passwd        string `json:"password"`
// 	Email         string `json:"email"`
// 	ConfirmPasswd string `json:"confirmPassword"`
// 	// ErrMessage string
// }
// type SignUpReply struct {
// 	REplyMssg string
// }
// type LoginReply struct {
// 	REplyMssg string
// }

// // expire the cookies time and delete sessionId from the session table
// func (h *AuthHandler) LogoutHandle(w http.ResponseWriter, r *http.Request) {
// 	activeUser, _ := h.AuthMidlaware.IsUserLoggedIn(w, r)
// 	if !activeUser {
// 		utils.Error(w, http.StatusBadRequest)
// 		return
// 	}
// 	sessionId, err := r.Cookie("sessionId")
// 	if err == nil || sessionId.Value != "" {
// 		err := h.SessionService.DeleteSession(sessionId.Value)
// 		if err != nil {
// 			utils.Error(w, http.StatusInternalServerError)
// 			return
// 		}
// 	}

// 	SetCookies(w, "sessionId", "", time.Now().Add(-1*time.Hour))
// 	http.Redirect(w, r, "/", http.StatusSeeOther)
// }

// func (h *AuthHandler) LoginHandle(w http.ResponseWriter, r *http.Request) {
// 	ActiveUser, _ := h.AuthMidlaware.IsUserLoggedIn(w, r)
// 	if ActiveUser {
// 		sendResponse(w, "already exist")
// 		return
// 	}
// 	test := ""
// 	switch true {
// 	case r.Method == http.MethodGet:
// 		utils.OpenHtml("templates_login.html", w, nil)
// 	case r.Method == http.MethodPost:
// 		var info LoginData
// 		if ActiveUser {
// 			// test = "in session"
// 			sendResponse(w, "session")
// 			return
// 		}
// 		err := json.NewDecoder(r.Body).Decode(&info)
// 		if err != nil {
// 			utils.Error(w, http.StatusBadRequest)
// 			return
// 		}
// 		if !h.AuthMidlaware.IsValidEmail(info.Email) ||
// 			!h.AuthMidlaware.IsValidPassword(info.Passwd) {
// 			// write in header satus code badRE
// 			// utils.Error(w, http.StatusBadRequest)
// 		} else {
// 			user, err := h.AuthService.Login(info.Email, info.Passwd)
// 			if err != nil || user == nil {
// 				switch true {
// 				case err.Error() == "in email":
// 					sendResponse(w, "email")
// 					return
// 				case err.Error() == "in password":
// 					sendResponse(w, "passdw")
// 					return
// 				}
// 				// utils.Error(w, http.StatusBadRequest)
// 			} else {
// 				test = "login Done"
// 				sessionExpires := time.Now().Add(5 * 60 * time.Minute)
// 				sessionId := uuid.Must(uuid.NewV4()).String()
// 				userSession := h.SessionService.CreateSession(sessionId, sessionExpires, user.ID)
// 				if userSession != nil {
// 					utils.Error(w, http.StatusInternalServerError)
// 					return
// 				}
// 				SetCookies(w, "sessionId", sessionId, sessionExpires)
// 			}
// 		}
// 		sendResponse(w, test)
// 	}
// }

// func sendResponse(w http.ResponseWriter, reply string) {
// 	w.Header().Set("Content-Type", "application/json")
// 	response := &LoginReply{
// 		REplyMssg: reply,
// 	}
// 	err := json.NewEncoder(w).Encode(&response)
// 	if err != nil {
// 		utils.Error(w, http.StatusInternalServerError)
// 		return
// 	}
// }

// func (h *AuthHandler) RegisterHandle(w http.ResponseWriter, r *http.Request) {
// 	ActiveUser, _ := h.AuthMidlaware.IsUserLoggedIn(w, r)
// 	if ActiveUser {
// 		sendResponse(w, "already exist")
// 		return
// 	}
// 	var test string
// 	switch true {
// 	case r.Method == http.MethodGet:
// 		utils.OpenHtml("templates_signUp.html", w, nil)
// 	case r.Method == http.MethodPost:
// 		var info SignUpData
// 		err := json.NewDecoder(r.Body).Decode(&info)
// 		if err != nil {
// 			utils.Error(w, http.StatusBadRequest)
// 		}
// 		if !h.AuthMidlaware.IsValidEmail(info.Email) ||
// 			!h.AuthMidlaware.IsValidName(info.Username) ||
// 			!h.AuthMidlaware.IsValidPassword(info.Passwd) ||
// 			!h.AuthMidlaware.IsValidPassword(info.ConfirmPasswd) ||
// 			!h.AuthMidlaware.IsmatchPassword(info.Passwd, info.ConfirmPasswd) {
// 			test = "err"
// 			utils.Error(w, http.StatusBadRequest)
// 		} else {
// 			userExist := h.AuthService.Register(info.Username, info.Email, info.Passwd)
// 			if userExist != nil {
// 				test = "err"
// 			} else {
// 				test = "Sign Done"
// 			}
// 		}
// 		sendResponse(w, test)
// 		// w.Header().Set("Content-Type", "application/json")
// 		// response := &SignUpReply{
// 		// 	REplyMssg: test,
// 		// }

// 		// json.NewEncoder(w).Encode(&response)
// 	}
// }

// func SetCookies(w http.ResponseWriter, name, value string, expires time.Time) {
// 	cookie := &http.Cookie{
// 		Name:     name,
// 		Value:    value,
// 		Path:     "/",
// 		Expires:  expires,
// 		HttpOnly: true,
// 	}

// 	http.SetCookie(w, cookie)
// }
